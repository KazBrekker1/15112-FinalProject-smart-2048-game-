#name : Ammar Yasser Karkour
#file name : Smart 2048_game engine
import random
import copy


class game_2048(object):
    #creating a board and save it in __init__ to use it later
    def __init__(self):
        self.board = self.boardLogic()
        self.numberOfMoves = 0

    #creating a board by creating a 2D MATRIX
    def boardLogic (self):
        self.board = []
        for i in range (4):
            self.board += [[0]*4]        
        self.board = self.addTwoNumbers(2)
        return self.board
    

    #adding two numbers to the new marix
    def addTwoNumbers (self,n):

        for i in range(n):
            nums = [2,2,2,2,2,2,2,2,2,4]
            newNum  = str((random.sample(nums,1))[0])
            randomR = random.randrange(4)
            randomC = random.randrange(4)            
            while self.board[randomR][randomC] != 0:
                randomR = random.randrange(4)
                randomC = random.randrange(4)
            self.board[randomR][randomC] = int(newNum)           
        return self.board
            
    #what happens when the user make a move
    def makeMove(self, key):
        #using the function nectMove to change the board
        tempBoard = copy.deepcopy(self.board)
        self.board = self.nextMove( key)
        #check if we can adding new number to the matrix     
        if tempBoard != self.board :
            self.board = self.addTwoNumbers (1)
            self.numberOfMoves += 1
            return    self.board
        else:
            #check if the user lost
            if self.checkLose() == True:            
                return 'Game Over'
            return    self.board                    
        #check if the user won
        if self.checkWin() == True :
            return  'You Win!'

        
    # check if the user won    
    def checkWin(self):
        
        for i in range(4):
                for j in range(4):
                    if int(self.board[i][j]) == 2048:
                        return True
                    else:
                        return False

        
    # check if the user lost                 
    def checkLose(self):
        
        for i in range(4):
            for j in range(4):
                if int(self.board[i][j]) == 0:
                    return False
        for i in range(3):
            for j in range(4):
                if self.board[i][j] == self.board[i+1][j]:
                    return False
        for i in range(4):
            for j in range(3):
                if self.board[i][j] == self.board[i][j+1]:
                    return False 
               
        return True


    #make a move
    def nextMove(self, userInput):
        # if the move is up
        if userInput == 'U':
            for i in range(1,4):
                for j in range(4):
                    
                    if self.board[i-1][j] == 0:
                        self.board[i-1][j] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (i-2) > -1 and self.board[i-2][j] == 0 :
                            self.board[i-2][j] = self.board[i-1][j]
                            self.board[i-1][j] = 0
                            
                            if (i-3) > -1 and self.board[i-3][j] == 0 :
                                self.board[i-3][j] = self.board[i-2][j]
                                self.board[i-2][j] = 0
                                
            for i in range(1,4):
                for j in range(4):
                    
                    if self.board[i-1][j] == self.board[i][j]:
                        self.board[i-1][j] = (self.board[i-1][j])*2
                        self.board[i][j] = 0
                           
                    if self.board[i-1][j] != 0 and self.board[i-1][j] != self.board[i][j]:
                        self.board[i-1][j] = self.board[i-1][j]
                        self.board[i][j] = self.board[i][j]

            for i in range(1,4):
                for j in range(4):
                    if self.board[i-1][j] == 0:
                            self.board[i-1][j] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (i-2) > -1 and self.board[i-2][j] == 0 :
                                self.board[i-2][j] = self.board[i-1][j]
                                self.board[i-1][j] = 0
                                
                                if (i-3) > -1 and self.board[i-3][j] == 0 :
                                    self.board[i-3][j] = self.board[i-2][j]
                                    self.board[i-2][j] = 0

        #if the move is down
        if userInput == 'D':
            for i in range(2,-1,-1):
                for j in range(4):
                    
                    if self.board[i+1][j] == 0:
                        self.board[i+1][j] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (i+2) < 4 and self.board[i+2][j] == 0  :
                            self.board[i+2][j] = self.board[i+1][j]
                            self.board[i+1][j] = 0
                            
                            if (i+3) < 4 and self.board[i+3][j] == 0 :
                                self.board[i+3][j] = self.board[i+2][j]
                                self.board[i+2][j] = 0
                                
            for i in range(2,-1,-1):
                for j in range(4):
                    
                    if self.board[i+1][j] == self.board[i][j]:
                        self.board[i+1][j] = (self.board[i+1][j])*2
                        self.board[i][j] = 0
                        
                    if self.board[i+1][j] != 0 and self.board[i+1][j] != self.board[i][j]:
                        self.board[i+1][j] = self.board[i+1][j]
                        self.board[i][j] = self.board[i][j]

            for i in range(2,-1,-1):
                for j in range(4):
                    if self.board[i+1][j] == 0:
                            self.board[i+1][j] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (i+2) < 4 and self.board[i+2][j] == 0  :
                                self.board[i+2][j] = self.board[i+1][j]
                                self.board[i+1][j] = 0
                                
                                if (i+3) < 4 and self.board[i+3][j] == 0 :
                                    self.board[i+3][j] = self.board[i+2][j]
                                    self.board[i+2][j] = 0
        #if the moveis down       
        if userInput == 'L':
            for i in range(4):
                for j in range(1,4):
                    
                    if self.board[i][j-1] == 0:
                        self.board[i][j-1] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (j-2) > -1 and self.board[i][j-2] == 0:
                            self.board[i][j-2] = self.board[i][j-1]
                            self.board[i][j-1] = 0
                            
                            if (j-3) > -1 and self.board[i][j-3] == 0:
                                self.board[i][j-3] = self.board[i][j-2]
                                self.board[i][j-2] = 0
                    
            for i in range(4):
                for j in range(1,4):
                    
                    if self.board[i][j-1] == self.board[i][j]:
                        self.board[i][j-1] = (self.board[i][j-1])*2
                        self.board[i][j] = 0
                    
                    if self.board[i][j-1] != 0 and self.board[i][j-1] != self.board[i][j]:
                        self.board[i][j-1] = self.board[i][j-1]
                        self.board[i][j] = self.board[i][j]
                        
            for i in range(4):
                for j in range(1,4):
                    if self.board[i][j-1] == 0:
                            self.board[i][j-1] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (j-2) > -1 and self.board[i][j-2] == 0:
                                self.board[i][j-2] = self.board[i][j-1]
                                self.board[i][j-1] = 0
                                
                                if (j-3) > -1 and self.board[i][j-3] == 0:
                                    self.board[i][j-3] = self.board[i][j-2]
                                    self.board[i][j-2] = 0

        #if the move is right
        if userInput == 'R':
            for i in range(4):
                for j in range(2,-1,-1):
                    
                    if self.board[i][j+1] == 0:
                        self.board[i][j+1] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (j+2) < 4 and self.board[i][j+2] == 0:
                            self.board[i][j+2] = self.board[i][j+1]
                            self.board[i][j+1] = 0
                            
                            if (j+3) < 4 and self.board[i][j+3] == 0:
                                self.board[i][j+3] = self.board[i][j+2]
                                self.board[i][j+2] = 0

            for i in range(4):                
                for j in range(2,-1,-1):
                    if self.board[i][j+1] == self.board[i][j]:
                       self.board[i][j+1] = (self.board[i][j+1])*2
                       self.board[i][j] = 0

                    if self.board[i][j+1] != 0 and self.board[i][j+1] != self.board[i][j]:
                        self.board[i][j+1] = self.board[i][j+1]
                        self.board[i][j] = self.board[i][j]

            for i in range(4):                
                for j in range(2,-1,-1):
                    if self.board[i][j+1] == 0:
                            self.board[i][j+1] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (j+2) < 4 and self.board[i][j+2] == 0:
                                self.board[i][j+2] = self.board[i][j+1]
                                self.board[i][j+1] = 0
                                
                                if (j+3) < 4 and self.board[i][j+3] == 0:
                                    self.board[i][j+3] = self.board[i][j+2]
                                    self.board[i][j+2] = 0


        return self.board


class AI1(object):

    #creating a board and save it in __init__ to use it later
    def __init__(self):
        self.board = self.boardLogic()
        self.numberOfMoves = 0

    #creating a board by creating a 2D MATRIX
    def boardLogic (self):
        self.board = []
        for i in range (4):
            self.board += [[0]*4]        
        self.board = self.addTwoNumbers(2)
        return self.board

    #adding two numbers to the new marix
    def addTwoNumbers (self,n):

        for i in range(n):
            nums = [2,2,2,2,2,2,2,2,2,4]
            newNum  = str((random.sample(nums,1))[0])
            randomR = random.randrange(4)
            randomC = random.randrange(4)            
            while self.board[randomR][randomC] != 0:
                randomR = random.randrange(4)
                randomC = random.randrange(4)
            self.board[randomR][randomC] = int(newNum)           
        return self.board

    def makeMove(self):
        #using the function nectMove to change the board
        tempBoard = copy.deepcopy(self.board)
        self.board = self.choice()        
        #check if we can adding new number to the matrix
        #check if the user won
        if self.checkWin() == True :
            return  'You Win!'
        
        if tempBoard != self.board :
            self.board = self.addTwoNumbers (1)
            self.numberOfMoves += 1
            return    self.board
        else:
            #check if the user lost
            if self.checkLose() == True:            
                return 'Game Over'
            

        

    def checkWin(self):
        
        for i in range(4):
                for j in range(4):
                    if int(self.board[i][j]) == 2048:
                        return True
                    else:
                        return False

        
    # check if the user lost                 
    def checkLose(self):
        
        for i in range(4):
            for j in range(4):
                if int(self.board[i][j]) == 0:
                    return False
        for i in range(3):
            for j in range(4):
                if self.board[i][j] == self.board[i+1][j]:
                    return False
        for i in range(4):
            for j in range(3):
                if self.board[i][j] == self.board[i][j+1]:
                    return False              
        return True

    #make a move
    def nextMove(self, userInput):
        
        # if the move is up
        if userInput == 'U':
            for i in range(1,4):
                for j in range(4):
                    
                    if self.board[i-1][j] == 0:
                        self.board[i-1][j] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (i-2) > -1 and self.board[i-2][j] == 0 :
                            self.board[i-2][j] = self.board[i-1][j]
                            self.board[i-1][j] = 0
                            
                            if (i-3) > -1 and self.board[i-3][j] == 0 :
                                self.board[i-3][j] = self.board[i-2][j]
                                self.board[i-2][j] = 0
                                
            for i in range(1,4):
                for j in range(4):
                    
                    if self.board[i-1][j] == self.board[i][j]:
                        self.board[i-1][j] = (self.board[i-1][j])*2
                        self.board[i][j] = 0
                           
                    if self.board[i-1][j] != 0 and self.board[i-1][j] != self.board[i][j]:
                        self.board[i-1][j] = self.board[i-1][j]
                        self.board[i][j] = self.board[i][j]

            for i in range(1,4):
                for j in range(4):
                    if self.board[i-1][j] == 0:
                            self.board[i-1][j] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (i-2) > -1 and self.board[i-2][j] == 0 :
                                self.board[i-2][j] = self.board[i-1][j]
                                self.board[i-1][j] = 0
                                
                                if (i-3) > -1 and self.board[i-3][j] == 0 :
                                    self.board[i-3][j] = self.board[i-2][j]
                                    self.board[i-2][j] = 0

        #if the move is down
        if userInput == 'D':
            for i in range(2,-1,-1):
                for j in range(4):
                    
                    if self.board[i+1][j] == 0:
                        self.board[i+1][j] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (i+2) < 4 and self.board[i+2][j] == 0  :
                            self.board[i+2][j] = self.board[i+1][j]
                            self.board[i+1][j] = 0
                            
                            if (i+3) < 4 and self.board[i+3][j] == 0 :
                                self.board[i+3][j] = self.board[i+2][j]
                                self.board[i+2][j] = 0
                                
            for i in range(2,-1,-1):
                for j in range(4):
                    
                    if self.board[i+1][j] == self.board[i][j]:
                        self.board[i+1][j] = (self.board[i+1][j])*2
                        self.board[i][j] = 0
                        
                    if self.board[i+1][j] != 0 and self.board[i+1][j] != self.board[i][j]:
                        self.board[i+1][j] = self.board[i+1][j]
                        self.board[i][j] = self.board[i][j]

            for i in range(2,-1,-1):
                for j in range(4):
                    if self.board[i+1][j] == 0:
                            self.board[i+1][j] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (i+2) < 4 and self.board[i+2][j] == 0  :
                                self.board[i+2][j] = self.board[i+1][j]
                                self.board[i+1][j] = 0
                                
                                if (i+3) < 4 and self.board[i+3][j] == 0 :
                                    self.board[i+3][j] = self.board[i+2][j]
                                    self.board[i+2][j] = 0
        #if the moveis down       
        if userInput == 'L':
            for i in range(4):
                for j in range(1,4):
                    
                    if self.board[i][j-1] == 0:
                        self.board[i][j-1] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (j-2) > -1 and self.board[i][j-2] == 0:
                            self.board[i][j-2] = self.board[i][j-1]
                            self.board[i][j-1] = 0
                            
                            if (j-3) > -1 and self.board[i][j-3] == 0:
                                self.board[i][j-3] = self.board[i][j-2]
                                self.board[i][j-2] = 0
                    
            for i in range(4):
                for j in range(1,4):
                    
                    if self.board[i][j-1] == self.board[i][j]:
                        self.board[i][j-1] = (self.board[i][j-1])*2
                        self.board[i][j] = 0
                    
                    if self.board[i][j-1] != 0 and self.board[i][j-1] != self.board[i][j]:
                        self.board[i][j-1] = self.board[i][j-1]
                        self.board[i][j] = self.board[i][j]
                        
            for i in range(4):
                for j in range(1,4):
                    if self.board[i][j-1] == 0:
                            self.board[i][j-1] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (j-2) > -1 and self.board[i][j-2] == 0:
                                self.board[i][j-2] = self.board[i][j-1]
                                self.board[i][j-1] = 0
                                
                                if (j-3) > -1 and self.board[i][j-3] == 0:
                                    self.board[i][j-3] = self.board[i][j-2]
                                    self.board[i][j-2] = 0

        #if the move is right
        if userInput == 'R':
            for i in range(4):
                for j in range(2,-1,-1):
                    
                    if self.board[i][j+1] == 0:
                        self.board[i][j+1] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (j+2) < 4 and self.board[i][j+2] == 0:
                            self.board[i][j+2] = self.board[i][j+1]
                            self.board[i][j+1] = 0
                            
                            if (j+3) < 4 and self.board[i][j+3] == 0:
                                self.board[i][j+3] = self.board[i][j+2]
                                self.board[i][j+2] = 0

            for i in range(4):                
                for j in range(2,-1,-1):
                    if self.board[i][j+1] == self.board[i][j]:
                       self.board[i][j+1] = (self.board[i][j+1])*2
                       self.board[i][j] = 0

                    if self.board[i][j+1] != 0 and self.board[i][j+1] != self.board[i][j]:
                        self.board[i][j+1] = self.board[i][j+1]
                        self.board[i][j] = self.board[i][j]

            for i in range(4):                
                for j in range(2,-1,-1):
                    if self.board[i][j+1] == 0:
                            self.board[i][j+1] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (j+2) < 4 and self.board[i][j+2] == 0:
                                self.board[i][j+2] = self.board[i][j+1]
                                self.board[i][j+1] = 0
                                
                                if (j+3) < 4 and self.board[i][j+3] == 0:
                                    self.board[i][j+3] = self.board[i][j+2]
                                    self.board[i][j+2] = 0


        return self.board
    
    # in this choice, we choose the move that generate the highest tile
    # (maximum (512-1024)) / (reached 2048 (1)in 1094 moves!!!)
    def choice(self):
        newBoard = copy.deepcopy(self.board)
        newBoard1 = copy.deepcopy(self.board)
        newBoard2 = copy.deepcopy(self.board)
        newBoard3 = copy.deepcopy(self.board)
        newBoard4 = copy.deepcopy(self.board)
        boards = [newBoard1,newBoard2,newBoard3,newBoard4]
        moves = ['L', 'R' ,'D'  ,'U' ]
        z = []
        for move in range(len(moves)):
            self.board = boards[move]
            aMove =  self.nextMove(moves[move])
            c = 0
            for i in range(4):
                for j in range(4):
                    if aMove[i][j] >= c:
                        c = aMove[i][j]
            z.append(c)          
        theOne = 0
        index = z[0]
        for num in range(1,len(z)):
            if z[num] >= index:
                theOne = num

        for i in range(4):
            if self.checkLose() is False:
                if boards[theOne] == newBoard:
                    boards.pop(theOne)
                    z.pop(theOne)
                    theOne = 0
                    index = z[0]
                    for num in range(1,len(z)):
                        if z[num] >= index:
                            theOne = num
                    
        return boards[theOne]
    
  

class AI2(object):

    #creating a board and save it in __init__ to use it later
    def __init__(self):
        self.board = self.boardLogic()
        self.numberOfMoves = 0

    #creating a board by creating a 2D MATRIX
    def boardLogic (self):
        self.board = []
        for i in range (4):
            self.board += [[0]*4]        
        self.board = self.addTwoNumbers(2)
        return self.board

    #adding two numbers to the new marix
    def addTwoNumbers (self,n):

        for i in range(n):
            nums = [2,2,2,2,2,2,2,2,2,4]
            newNum  = str((random.sample(nums,1))[0])
            randomR = random.randrange(4)
            randomC = random.randrange(4)            
            while self.board[randomR][randomC] != 0:
                randomR = random.randrange(4)
                randomC = random.randrange(4)
            self.board[randomR][randomC] = int(newNum)           
        return self.board

    def makeMove(self):
        #using the function nectMove to change the board
        tempBoard = copy.deepcopy(self.board)
        self.board = self.choice2()
      
        #check if we can adding new number to the matrix
        #check if the user won
        if self.checkWin() == True :
            return  'You Win!'
        
        if tempBoard != self.board :
            self.board = self.addTwoNumbers (1)
            self.numberOfMoves += 1
            return    self.board
        
        else:
            #check if the user lost
            if self.checkLose() == True:   
                return 'Game Over'        


    def checkWin(self):
        
        for i in range(4):
                for j in range(4):
                    if int(self.board[i][j]) == 2048:
                        return True
                    else:
                        return False

        
    # check if the user lost                 
    def checkLose(self):
        
        for i in range(4):
            for j in range(4):
                if int(self.board[i][j]) == 0:
                    return False
        for i in range(3):
            for j in range(4):
                if self.board[i][j] == self.board[i+1][j]:
                    return False
        for i in range(4):
            for j in range(3):
                if self.board[i][j] == self.board[i][j+1]:
                    return False              
        return True

    #make a move
    def nextMove(self, userInput):
        
        # if the move is up
        if userInput == 'U':
            for i in range(1,4):
                for j in range(4):
                    
                    if self.board[i-1][j] == 0:
                        self.board[i-1][j] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (i-2) > -1 and self.board[i-2][j] == 0 :
                            self.board[i-2][j] = self.board[i-1][j]
                            self.board[i-1][j] = 0
                            
                            if (i-3) > -1 and self.board[i-3][j] == 0 :
                                self.board[i-3][j] = self.board[i-2][j]
                                self.board[i-2][j] = 0
                                
            for i in range(1,4):
                for j in range(4):
                    
                    if self.board[i-1][j] == self.board[i][j]:
                        self.board[i-1][j] = (self.board[i-1][j])*2
                        self.board[i][j] = 0
                           
                    if self.board[i-1][j] != 0 and self.board[i-1][j] != self.board[i][j]:
                        self.board[i-1][j] = self.board[i-1][j]
                        self.board[i][j] = self.board[i][j]

            for i in range(1,4):
                for j in range(4):
                    if self.board[i-1][j] == 0:
                            self.board[i-1][j] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (i-2) > -1 and self.board[i-2][j] == 0 :
                                self.board[i-2][j] = self.board[i-1][j]
                                self.board[i-1][j] = 0
                                
                                if (i-3) > -1 and self.board[i-3][j] == 0 :
                                    self.board[i-3][j] = self.board[i-2][j]
                                    self.board[i-2][j] = 0

        #if the move is down
        if userInput == 'D':
            for i in range(2,-1,-1):
                for j in range(4):
                    
                    if self.board[i+1][j] == 0:
                        self.board[i+1][j] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (i+2) < 4 and self.board[i+2][j] == 0  :
                            self.board[i+2][j] = self.board[i+1][j]
                            self.board[i+1][j] = 0
                            
                            if (i+3) < 4 and self.board[i+3][j] == 0 :
                                self.board[i+3][j] = self.board[i+2][j]
                                self.board[i+2][j] = 0
                                
            for i in range(2,-1,-1):
                for j in range(4):
                    
                    if self.board[i+1][j] == self.board[i][j]:
                        self.board[i+1][j] = (self.board[i+1][j])*2
                        self.board[i][j] = 0
                        
                    if self.board[i+1][j] != 0 and self.board[i+1][j] != self.board[i][j]:
                        self.board[i+1][j] = self.board[i+1][j]
                        self.board[i][j] = self.board[i][j]

            for i in range(2,-1,-1):
                for j in range(4):
                    if self.board[i+1][j] == 0:
                            self.board[i+1][j] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (i+2) < 4 and self.board[i+2][j] == 0  :
                                self.board[i+2][j] = self.board[i+1][j]
                                self.board[i+1][j] = 0
                                
                                if (i+3) < 4 and self.board[i+3][j] == 0 :
                                    self.board[i+3][j] = self.board[i+2][j]
                                    self.board[i+2][j] = 0
        #if the moveis down       
        if userInput == 'L':
            for i in range(4):
                for j in range(1,4):
                    
                    if self.board[i][j-1] == 0:
                        self.board[i][j-1] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (j-2) > -1 and self.board[i][j-2] == 0:
                            self.board[i][j-2] = self.board[i][j-1]
                            self.board[i][j-1] = 0
                            
                            if (j-3) > -1 and self.board[i][j-3] == 0:
                                self.board[i][j-3] = self.board[i][j-2]
                                self.board[i][j-2] = 0
                    
            for i in range(4):
                for j in range(1,4):
                    
                    if self.board[i][j-1] == self.board[i][j]:
                        self.board[i][j-1] = (self.board[i][j-1])*2
                        self.board[i][j] = 0
                    
                    if self.board[i][j-1] != 0 and self.board[i][j-1] != self.board[i][j]:
                        self.board[i][j-1] = self.board[i][j-1]
                        self.board[i][j] = self.board[i][j]
                        
            for i in range(4):
                for j in range(1,4):
                    if self.board[i][j-1] == 0:
                            self.board[i][j-1] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (j-2) > -1 and self.board[i][j-2] == 0:
                                self.board[i][j-2] = self.board[i][j-1]
                                self.board[i][j-1] = 0
                                
                                if (j-3) > -1 and self.board[i][j-3] == 0:
                                    self.board[i][j-3] = self.board[i][j-2]
                                    self.board[i][j-2] = 0

        #if the move is right
        if userInput == 'R':
            for i in range(4):
                for j in range(2,-1,-1):
                    
                    if self.board[i][j+1] == 0:
                        self.board[i][j+1] = self.board[i][j]
                        self.board[i][j] = 0
                        
                        if (j+2) < 4 and self.board[i][j+2] == 0:
                            self.board[i][j+2] = self.board[i][j+1]
                            self.board[i][j+1] = 0
                            
                            if (j+3) < 4 and self.board[i][j+3] == 0:
                                self.board[i][j+3] = self.board[i][j+2]
                                self.board[i][j+2] = 0

            for i in range(4):                
                for j in range(2,-1,-1):
                    if self.board[i][j+1] == self.board[i][j]:
                       self.board[i][j+1] = (self.board[i][j+1])*2
                       self.board[i][j] = 0

                    if self.board[i][j+1] != 0 and self.board[i][j+1] != self.board[i][j]:
                        self.board[i][j+1] = self.board[i][j+1]
                        self.board[i][j] = self.board[i][j]

            for i in range(4):                
                for j in range(2,-1,-1):
                    if self.board[i][j+1] == 0:
                            self.board[i][j+1] = self.board[i][j]
                            self.board[i][j] = 0
                            
                            if (j+2) < 4 and self.board[i][j+2] == 0:
                                self.board[i][j+2] = self.board[i][j+1]
                                self.board[i][j+1] = 0
                                
                                if (j+3) < 4 and self.board[i][j+3] == 0:
                                    self.board[i][j+3] = self.board[i][j+2]
                                    self.board[i][j+2] = 0


        return self.board

    # in thi choice , we choose the move that generate the bigger number of empty tiles
    # (maximum (512-1024) )
    def choice2(self):
        newBoard = copy.deepcopy(self.board)
        newBoard1 = copy.deepcopy(self.board)
        newBoard2 = copy.deepcopy(self.board)
        newBoard3 = copy.deepcopy(self.board)
        newBoard4 = copy.deepcopy(self.board)
        boards = [newBoard1,newBoard2,newBoard3,newBoard4]
        moves = ['L','R','D'  ,'U' ]
        z = []
        #count how many zeros in each board
        for move in range(len(moves)):
            self.board = boards[move]
            aMove =  self.nextMove(moves[move])
            c = 0
            for i in range(4):
                for j in range(4):
                    if aMove[i][j] == 0:
                        c += 1
            z.append(c)
                
        # count the score for each board    
        if len(z) > 1:
            for i in range(len(boards)):
                z[i] = self.chieck(z[i],boards[i])
            
        print z
        # choose the board with the highest score 
        theOne = z.index(max(z))        
        for i in range(4):
            if self.checkLose() is False:
                if boards[theOne] == newBoard:
                    boards.pop(theOne)
                    z.pop(theOne)
                    theOne = z.index(max(z))     
        return boards[theOne]

    def chieck(self,score,board):

        place = 0
        beside = 0
        beside2 = 0
        beside3 = 0
        maximum = 0
        maximum2 = 0
        maximum3 = 0
        sum1 = 0
        x = 0
        y = 0
        a = 0
        b = 0
        
        for i in range(4):
            for j in range(4):
                if board[i][j] > maximum:
                    maximum = board[i][j]
                    x = i
                    y = j
        

        for i in range(4):
            for j in range(4):
                if board[i][j] < maximum  and  board[i][j] > maximum2:
                    maximum2 = board[i][j]
                    a = i
                    b = j
                else:
                    a = 2
                    b = 2
                
        for i in range(4):
            for j in range(4):
                sum1 += (board[i][j])**2
                
        ratio = (maximum/2048.0)        
        if maximum == board[0][0] :#or maximum == board[0][3] or maximum == board[3][0] or maximum == board[3][3]:
            place = 6
            
        # check for the middle squares   
        if (x != 0 and x != 3) and (y != 0 and y != 3):
            if (board[x][y] == board[x][y-1]) or (board[x][y] == board[x][y+1]) or (board[x][y] == board[x-1][y]) or (board[x][y] == board[x+1][y]):
                beside = 3
                
        # check for the corners squares
        if x == 0 and y == 0 :
            if (board[x][y+1] == board[x][y]) or(board[x+1][y] == board[x][y]):
                beside = 3
        if x == 0 and y == 3 :
            if (board[x][y-1] == board[x][y]) or(board[x+1][y] == board[x][y]):
                beside = 3
        if x == 3 and y == 0 :
            if (board[x][y+1] == board[x][y]) or(board[x-1][y] == board[x][y]):
                beside = 3  
        if x == 3 and y == 3 :
            if (board[x][y-1] == board[x][y]) or(board[x-1][y] == board[x][y]):
                beside = 3

        #in boarders but not in corner 
        if (x != 0 and y == 0) and (x != 0 and y == 3) :
            if (board[x][y+1] == board[x][y]) or (board[x+1][y] == board[x][y]) or (board[x][y-1] == board[x][y]):
                beside = 3
        if (x != 3 and y == 0) and (x != 3 and y == 3) :
            if (board[x][y+1] == board[x][y]) or(board[x-1][y] == board[x][y]) or (board[x][y-1] == board[x][y]):
                beside = 3
        if (x == 0 and y != 0) and (x == 3 and y != 0) :
            if (board[x][y+1] == board[x][y]) or(board[x-1][y] == board[x][y]) or (board[x+1][y] == board[x][y]) :
                beside = 3    
        if (x == 0 and y != 3) and (x == 3 and y != 3) :
            if (board[x][y-1] == board[x][y]) or (board[x-1][y] == board[x][y]) or (board[x+1][y] == board[x][y]):
                beside = 3

        #__________________________________________________________________________

         # check for the middle squares   
        if (a != 0 and a != 3) and (b != 0 and b != 3):
            if (board[x][y] == board[a][b-1]) or (board[x][y] == board[a][b+1]) or (board[x][y] == board[a-1][b]) or (board[x][y] == board[a+1][b]):
                beside2 = 5
                
        # check for the corners squares
        if a == 0 and b == 0 :
            if (board[a][b+1] == board[x][y]) or(board[a+1][b] == board[x][y]):
                beside2 = 5
        if a == 0 and y == 3 :
            if (board[a][b-1] == board[x][y]) or(board[a+1][b] == board[x][y]):
                beside2 = 5
        if a == 3 and b == 0 :
            if (board[a][b+1] == board[x][y]) or(board[a-1][b] == board[x][y]):
                beside2 = 5  
        if a == 3 and b == 3 :
            if (board[a][b-1] == board[x][y]) or(board[a-1][b] == board[x][y]):
                beside2 = 5

        #in boarders but not in corner 
        if (a != 0 and b == 0) and (a != 0 and b == 3) :
            if (board[a][b+1] == board[x][y]) or (board[a+1][b] == board[x][y]) or (board[a][b-1] == board[x][y]):
                beside2 = 5
        if (a != 3 and b == 0) and (a != 3 and b == 3) :
            if (board[a][b+1] == board[x][y]) or(board[a-1][b] == board[x][y]) or (board[a][b-1] == board[x][y]):
                beside2 = 5
        if (a == 0 and b != 0) and (a == 3 and b != 0) :
            if (board[a][+1] == board[x][y]) or(board[a-1][b] == board[x][y]) or (board[a+1][b] == board[x][y]) :
                beside2 = 5  
        if (a == 0 and b != 3) and (a == 3 and b != 3) :
            if (board[a][b-1] == board[x][y]) or (board[a-1][b] == board[x][y]) or (board[a+1][b] == board[x][y]):
                beside = 5

        #________________________________________________________________________________
        # check for the middle squares   
        if (a != 0 and a != 3) and (b != 0 and b != 3):
            if (board[a][b] == board[a][b-1]) or (board[a][b] == board[a][b+1]) or (board[a][b] == board[a-1][b]) or (board[a][b] == board[a+1][b]):
                beside3 = 1
                
        # check for the corners squares
        if a == 0 and b == 0 :
            if (board[a][b+1] == board[a][b]) or(board[a+1][b] == board[a][b]):
                beside3 = 1
        if a == 0 and y == 3 :
            if (board[a][b-1] == board[a][b]) or(board[a+1][b] == board[a][b]):
                beside3 = 1
        if a == 3 and b == 0 :
            if (board[a][b+1] == board[a][b]) or(board[a-1][b] == board[a][b]):
                beside3 = 1 
        if a == 3 and b == 3 :
            if (board[a][b-1] == board[a][b]) or(board[a-1][b] == board[a][b]):
                beside3 = 1

        #in boarders but not in corner 
        if (a != 0 and b == 0) and (a != 3 and b == 0) :
            if (board[a][b+1] == board[a][b]) or (board[a+1][b] == board[a][b]) or (board[a][b-1] == board[a][b]):
                beside3 = 2
        if (a != 3 and b == 0) and (a != 3 and b == 3) :
            if (board[a][b+1] == board[a][b]) or(board[a-1][b] == board[a][b]) or (board[a][b-1] == board[a][b]):
                beside3 = 2
        if (a == 0 and b != 0) and (a == 3 and b != 0) :
            if (board[a][b+1] == board[a][b]) or(board[a-1][b] == board[a][b]) or (board[a+1][b] == board[a][b]) :
                beside3 = 2   
        if (a == 0 and b != 3) and (a == 3 and b != 3) :
            if (board[a][b-1] == board[a][b]) or (board[a-1][b] == board[a][b]) or (board[a+1][b] == board[a][b]):
                beside3 = 2
        #++++++++++++++++++++++++++++++++++++++++++

        for i in range(4):
            for j in range(3):
                if board[i][j] == board[i][j+1]:
                    maximum3 +=1

        for i in range(4):
            for j in range(1,4):
                if board[i][j] == board[i][j-1]:
                    maximum3 +=1

        for i in range(3):
            for j in range(4):
                if board[i][j] == board[i+1][j]:
                    maximum3 +=1

        for i in range(1,4):
            for j in range(4):
                if board[i][j] == board[i-1][j]:
                    maximum3 +=1
        
        score2 =  score  + place +  (4+ratio)+ (3+(sum1/((10**len(str(sum1))))))   + (2+(float(beside) / 4)) + (2+(float(beside2) / 4)) + (float(beside3) / 4)  +  (1+(float(maximum3)/100))
        return score2


































        
